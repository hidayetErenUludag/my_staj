import socket
import threading
from enum import Enum

HOST = "127.0.0.1"
PORT = 5555
MAX_BYTE = 1024
SERVER_ID = 1
Train_move = False

def run(host, port):
    try:
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.bind((host, port))
        server.listen(5)
    except Exception as e:
        print(e)
        return

    while True:
        try:
            client_socket, addr = server.accept()
            print("Client connected:", addr)
            client_thread = threading.Thread(target=client_handler, args=(client_socket,))
            client_thread.start()
        except Exception as e:
            print(f"Error {e}")


def send_message_to_client(client_socket, message):
    try:
        client_socket.send(message)
    except Exception as e:
        print(f"Message could not be sent. {e}")


def client_handler(client_socket):
    global Train_move
    try:
        while True:
            message = client_socket.recv(MAX_BYTE)
            if not message:
                print("Client disconnected.")
                break  # Exit the loop if client disconnects

            de_message = message.decode().strip()
            print(f"Received message: {de_message}")

            if MessageType[de_message] == MessageType.move:
                Train_move = True
            else:
                Train_move = False

            if message:
                print(f"Train move status: {Train_move}")
    except Exception as e:
        print(f"Error: {e}")
    finally:
        client_socket.close()  # Ensure socket is closed when done


def input(condition):
    while True:
        # Condition will be implemented later
        pass


class MessageType(Enum):
    move = 1
    stop = 2


def main():
    threading.Thread(target=run, args=(HOST, PORT)).start()


if __name__ == "__main__":
    main()
